{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\StockMarket\\\\frontend\\\\stock\\\\frontend\\\\src\\\\MyComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Plot from \"react-plotly.js\";\nimport \"./App.css\";\nimport { Dropdown } from \"react-bootstrap\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyComponent = () => {\n  _s();\n  const [topCompanies, setTopCompanies] = useState([]);\n  const [leastCompanies, setLeastCompanies] = useState([]);\n  const [fetchCompanies, setFetchCompanies] = useState([]);\n  const [fetchDates, setFetchDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [selectedCompany, setSelectedCompany] = useState(null);\n  const [macdData, setMacdData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [chartTitle, setChartTitle] = useState(\"\");\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        const [companyResponse, dateResponse] = await Promise.all([axios.get(\"http://localhost:5000/api/get-symbols\"), axios.get(\"http://localhost:5000/api/get-dates\")]);\n        setFetchCompanies(companyResponse.data);\n        const dates = dateResponse.data.map(dateObj => new Date(dateObj.DTE_TME));\n        setFetchDates(dates);\n        const reversedDates = dates.reverse();\n        let topResponse = null;\n        // Find the latest date with data available\n        for (const date of reversedDates) {\n          const formattedDate = date.toISOString().split(\"T\")[0];\n          try {\n            const [topRes, leastResponse] = await Promise.all([axios.get(`http://localhost:5000/api/top-companies/${formattedDate}`), axios.get(`http://localhost:5000/api/least-companies/${formattedDate}`)]);\n            if (topRes.data.length > 0 && leastResponse.data.length > 0) {\n              topResponse = topRes;\n              setSelectedDate(date);\n              setTopCompanies(topResponse.data);\n              setLeastCompanies(leastResponse.data);\n              break;\n            }\n          } catch (err) {\n            console.log(`No data for ${formattedDate}, trying next date...`);\n          }\n        }\n        const randomCompany = topResponse.data[Math.floor(Math.random() * topResponse.data.length)];\n        if (randomCompany) {\n          handleCompanySelect(randomCompany.SYMBOL);\n        }\n        setLoading(false);\n      } catch (error) {\n        setError(error.message || \"An error occurred while fetching data.\");\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, []);\n  useEffect(() => {\n    if (!selectedDate) return;\n    const fetchTopCompanies = async () => {\n      const formattedDate = selectedDate.toISOString().split(\"T\")[0];\n      try {\n        const response = await axios.get(`http://localhost:5000/api/top-companies/${formattedDate}`);\n        setTopCompanies(response.data);\n      } catch (error) {\n        setError(error.message || `An error occurred while fetching top companies for ${formattedDate}.`);\n      }\n    };\n    const fetchLeastCompanies = async () => {\n      const formattedDate = selectedDate.toISOString().split(\"T\")[0];\n      try {\n        const response = await axios.get(`http://localhost:5000/api/least-companies/${formattedDate}`);\n        setLeastCompanies(response.data);\n      } catch (error) {\n        setError(error.message || `An error occurred while fetching least companies for ${formattedDate}.`);\n      }\n    };\n    fetchTopCompanies();\n    fetchLeastCompanies();\n  }, [selectedDate]);\n  const handleCompanySelect = async symbol => {\n    try {\n      const [companyResponse, macdResponse] = await Promise.all([axios.get(`http://localhost:5000/api/company/${symbol}`), axios.get(`http://localhost:5000/api/macd/${symbol}`)]);\n      setSelectedCompany(companyResponse.data);\n      setMacdData(macdResponse.data);\n      setChartTitle(`${companyResponse.data[0].SYMBOL}`);\n    } catch (error) {\n      setError(error.message || `An error occurred while fetching data for ${symbol}.`);\n    }\n  };\n  const handleDateChange = date => {\n    const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n    setSelectedDate(utcDate);\n  };\n  const handleNavigate = () => {\n    navigate(\"/TreeMap\");\n  };\n  const handleNavigateToTable = async () => {\n    navigate(\"/gainers-losers-table\");\n  };\n  const handleBuySell = () => {\n    navigate(\"/buy-sell\");\n  };\n  const handleHoldings = () => {\n    navigate(\"/holdings\");\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 12\n    }, this);\n  }\n  if (!Array.isArray(fetchCompanies) || fetchCompanies.length === 0) {\n    console.error(\"Invalid data format. Expected a non-empty array.\");\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Error: Invalid data format.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 12\n    }, this);\n  }\n  var layout = {\n    dragmode: \"zoom\",\n    showlegend: false,\n    width: 1180,\n    height: 600,\n    // Increased height to accommodate the MACD chart\n    margin: {\n      t: 30,\n      l: 50,\n      r: 50,\n      b: 30\n    },\n    xaxis: {\n      autorange: true,\n      title: \"Date\",\n      rangeselector: {\n        x: 0,\n        y: 1.2,\n        xanchor: \"left\",\n        font: {\n          size: 8\n        },\n        buttons: [{\n          step: \"month\",\n          stepmode: \"backward\",\n          count: 1,\n          label: \"1 month\"\n        }, {\n          step: \"month\",\n          stepmode: \"backward\",\n          count: 6,\n          label: \"6 months\"\n        }, {\n          step: \"all\",\n          label: \"All dates\"\n        }]\n      }\n    },\n    yaxis: {\n      autorange: true\n    },\n    title: {\n      text: chartTitle,\n      // Dynamically set the chart title\n      font: {\n        family: \"Arial, sans-serif\",\n        size: 16,\n        color: \"#333\"\n      },\n      xref: \"paper\",\n      x: 0.5,\n      xanchor: \"center\",\n      y: 0.9,\n      yanchor: \"top\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: /*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"navbar flex-column\",\n        children: [/*#__PURE__*/_jsxDEV(Dropdown, {\n          className: \"dropdown2\",\n          children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n            variant: \"primary\",\n            id: \"dropdown-basic\",\n            children: selectedDate ? selectedDate.toLocaleDateString() : \"Select Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n            children: /*#__PURE__*/_jsxDEV(DatePicker, {\n              selected: selectedDate,\n              onChange: handleDateChange,\n              inline: true,\n              includeDates: fetchDates\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleBuySell,\n            children: \"buy-sell\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNavigate,\n            children: \"Show Treemap\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleNavigateToTable,\n            children: \"gainers-losers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleHoldings,\n            children: \"Holdings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"heading\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Data Decode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: selectedDate ? `Data for ${selectedDate.toLocaleDateString()}` : \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"boxes\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box\",\n          children: topCompanies.slice(0, 5).map(company => {\n            const close = parseFloat(company.CLOSE_DIFF);\n            const color = close >= 0 ? \"green\" : \"red\";\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"company-info\",\n              onClick: () => handleCompanySelect(company.SYMBOL),\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: `company-name ${color}`,\n                children: `${company.SYMBOL} - ${close >= 0 ? \"+\" : \"\"}${close.toFixed(2)}%`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 19\n              }, this)\n            }, company.SYMBOL, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"box\",\n          children: leastCompanies.slice(0, 5).map(company => {\n            const close = parseFloat(company.CLOSE_DIFF);\n            const color = close >= 0 ? \"green\" : \"red\";\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"company-info\",\n              onClick: () => handleCompanySelect(company.SYMBOL),\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: `company-name ${color}`,\n                children: `${company.SYMBOL} - ${close >= 0 ? \"+\" : \"\"}${close.toFixed(2)}%`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 19\n              }, this)\n            }, company.SYMBOL, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        children: selectedCompany && /*#__PURE__*/_jsxDEV(Plot, {\n          data: [{\n            x: selectedCompany.map(item => item.DTE_TME),\n            open: selectedCompany.map(item => parseFloat(item.OPEN)),\n            high: selectedCompany.map(item => parseFloat(item.HIGH)),\n            low: selectedCompany.map(item => parseFloat(item.LOW)),\n            close: selectedCompany.map(item => parseFloat(item.CLOSE)),\n            type: \"candlestick\",\n            name: `${selectedCompany[0].SYMBOL} Candlestick Chart`\n          }, macdData && {\n            x: macdData.map(item => item.date),\n            y: macdData.map(item => item.macd),\n            type: \"scatter\",\n            mode: \"lines\",\n            name: \"MACD\",\n            yaxis: \"y2\",\n            line: {\n              color: \"blue\"\n            }\n          }, macdData && {\n            x: macdData.map(item => item.date),\n            y: macdData.map(item => item.signal),\n            type: \"scatter\",\n            mode: \"lines\",\n            name: \"Signal Line\",\n            yaxis: \"y2\",\n            line: {\n              color: \"red\"\n            }\n          }, macdData && {\n            x: macdData.map(item => item.date),\n            y: macdData.map(item => item.histogram),\n            type: \"bar\",\n            name: \"Histogram\",\n            yaxis: \"y2\",\n            marker: {\n              color: \"green\"\n            }\n          }],\n          layout: {\n            ...layout,\n            yaxis2: {\n              overlaying: \"y\",\n              side: \"right\",\n              title: \"MACD\"\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n        className: \"footer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"footer-content\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\xA9 2024 Apex Trading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n_s(MyComponent, \"sMPuLfmnNtuHt2jCHTOfKtTR3CU=\", false, function () {\n  return [useNavigate];\n});\n_c = MyComponent;\nexport default MyComponent;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import axios from \"axios\";\n// import \"./App.css\";\n// import { Dropdown } from \"react-bootstrap\";\n// import { Typeahead } from \"react-bootstrap-typeahead\";\n// import DatePicker from \"react-datepicker\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import \"react-bootstrap-typeahead/css/Typeahead.css\";\n// import moment from 'moment';\n// import Chart from \"chart.js/auto\";\n// import 'chartjs-adapter-moment';\n\n// const MyComponent = () => {\n//   const [topCompanies, setTopCompanies] = useState([]);\n//   const [leastCompanies, setLeastCompanies] = useState([]);\n//   const [fetchCompanies, setFetchCompanies] = useState([]);\n//   const [fetchDates, setFetchDates] = useState([]);\n//   const [selectedDate, setSelectedDate] = useState(null);\n//   const [selectedCompany, setSelectedCompany] = useState(null);\n//   const [macdData, setMacdData] = useState(null);\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [chartTitle, setChartTitle] = useState(\"\");\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const fetchInitialData = async () => {\n//       try {\n//         const [companyResponse, dateResponse] = await Promise.all([\n//           axios.get(\"http://localhost:5000/api/get-symbols\"),\n//           axios.get(\"http://localhost:5000/api/get-dates\"),\n//         ]);\n\n//         setFetchCompanies(companyResponse.data);\n\n//         const dates = dateResponse.data.map(\n//           (dateObj) => new Date(dateObj.DTE_TME)\n//         );\n//         setFetchDates(dates);\n//         const reversedDates = dates.reverse();\n//         // Find the latest date with data available\n//         for (const date of reversedDates) {\n//           const formattedDate = date.toISOString().split(\"T\")[0];\n//           try {\n//             const [topResponse, leastResponse] = await Promise.all([\n//               axios.get(\n//                 `http://localhost:5000/api/top-companies/${formattedDate}`\n//               ),\n//               axios.get(\n//                 `http://localhost:5000/api/least-companies/${formattedDate}`\n//               ),\n//             ]);\n//             if (topResponse.data.length > 0 && leastResponse.data.length > 0) {\n//               setSelectedDate(date);\n//               setTopCompanies(topResponse.data);\n//               setLeastCompanies(leastResponse.data);\n//               break;\n//             }\n//           } catch (err) {\n//             console.log(`No data for ${formattedDate}, trying next date...`);\n//           }\n//         }\n//         const randomCompany =\n//           companyResponse.data[\n//             Math.floor(Math.random() * companyResponse.data.length)\n//           ];\n//         if (randomCompany) {\n//           handleCompanySelect(randomCompany.SYMBOL);\n//         }\n//         setLoading(false);\n//       } catch (error) {\n//         setError(error.message || \"An error occurred while fetching data.\");\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchInitialData();\n//   }, []);\n\n//   useEffect(() => {\n//     if (!selectedDate) return;\n\n//     const fetchTopCompanies = async () => {\n//       const formattedDate = selectedDate.toISOString().split(\"T\")[0];\n//       try {\n//         const response = await axios.get(\n//           `http://localhost:5000/api/top-companies/${formattedDate}`\n//         );\n//         setTopCompanies(response.data);\n//       } catch (error) {\n//         setError(\n//           error.message ||\n//             `An error occurred while fetching top companies for ${formattedDate}.`\n//         );\n//       }\n//     };\n\n//     const fetchLeastCompanies = async () => {\n//       const formattedDate = selectedDate.toISOString().split(\"T\")[0];\n//       try {\n//         const response = await axios.get(\n//           `http://localhost:5000/api/least-companies/${formattedDate}`\n//         );\n//         setLeastCompanies(response.data);\n//       } catch (error) {\n//         setError(\n//           error.message ||\n//             `An error occurred while fetching least companies for ${formattedDate}.`\n//         );\n//       }\n//     };\n\n//     fetchTopCompanies();\n//     fetchLeastCompanies();\n//   }, [selectedDate]);\n\n//   const handleCompanySelect = async (symbol) => {\n//     try {\n//       const [companyResponse, macdResponse] = await Promise.all([\n//         axios.get(`http://localhost:5000/api/company/${symbol}`),\n//         axios.get(`http://localhost:5000/api/macd/${symbol}`),\n//       ]);\n//       setSelectedCompany(companyResponse.data);\n//       setMacdData(macdResponse.data);\n//       setChartTitle(`${companyResponse.data[0].SYMBOL}`);\n//     } catch (error) {\n//       setError(\n//         error.message || `An error occurred while fetching data for ${symbol}.`\n//       );\n//     }\n//   };\n\n//   const handleDateChange = (date) => {\n//     const utcDate = new Date(\n//       Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())\n//     );\n//     setSelectedDate(utcDate);\n//   };\n\n//   const handleNavigate = () => {\n//     navigate(\"/TreeMap\"); // Navigate to OtherComponent\n//   };\n\n//   const handleNavigateToTable = async () => {\n//     navigate(\"/gainers-losers-table\");\n//   };\n\n//   useEffect(() => {\n//     if (!selectedCompany || !macdData) return;\n\n//     const ctx = document.getElementById(\"myChart\");\n//     if (ctx) {\n//       const existingChart = Chart.getChart(ctx);\n//       if (existingChart) {\n//         existingChart.destroy(); // Destroy the existing chart\n//       }\n//       const candlestickData = {\n//         labels: selectedCompany.map((item) => {\n//           const date = new Date(item.DTE_TME);\n//           return date.toISOString().split(\"T\")[0];\n//         }),\n//         datasets: [\n//           {\n//             label: \"Candlestick\",\n//             data: selectedCompany\n//               .map((item) => ({\n//                 t: item.DTE_TME,\n//                 o: parseFloat(item.OPEN),\n//                 h: parseFloat(item.HIGH),\n//                 l: parseFloat(item.LOW),\n//                 c: parseFloat(item.CLOSE),\n//               }))\n//               .sort((a, b) => a.t - b.t),\n//             backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n//             borderColor: \"rgba(255, 99, 132, 1)\",\n//             borderWidth: 1,\n//           },\n//           {\n//             label: \"MACD\",\n//             data: macdData.map((item) => ({\n//               x: item.date,\n//               y: item.macd,\n//             })),\n//             borderColor: \"rgba(54, 162, 235, 1)\",\n//             borderWidth: 1,\n//             type: \"line\",\n//             yAxisID: \"y-axis-2\",\n//           },\n//           {\n//             label: \"Signal Line\",\n//             data: macdData.map((item) => ({\n//               x: item.date,\n//               y: item.signal,\n//             })),\n//             borderColor: \"rgba(255, 206, 86, 1)\",\n//             borderWidth: 1,\n//             type: \"line\",\n//             yAxisID: \"y-axis-2\",\n//           },\n//           {\n//             label: \"Histogram\",\n//             data: macdData.map((item) => ({\n//               x: item.date,\n//               y: item.histogram,\n//             })),\n//             backgroundColor: \"rgba(75, 192, 192, 0.2)\",\n//             borderColor: \"rgba(75, 192, 192, 1)\",\n//             borderWidth: 1,\n//             type: \"bar\",\n//             yAxisID: \"y-axis-2\",\n//           },\n//         ],\n//       };\n\n//       const options = {\n//         scales: {\n//           x: {\n//             type: \"time\",\n//             time: {\n//               unit: \"\"\n//             },\n//           },\n//           y: {\n//             beginAtZero: false,\n//           },\n//           yAxes: [\n//             {\n//               type: \"linear\",\n//               display: true,\n//               position: \"left\",\n//               id: \"y-axis-1\",\n//             },\n//             {\n//               type: \"linear\",\n//               display: true,\n//               position: \"right\",\n//               id: \"y-axis-2\",\n//               grid: {\n//                 drawOnChartArea: false,\n//               },\n//             },\n//           ],\n//         },\n//       };\n\n//       new Chart(ctx, {\n//         type: \"bar\",\n//         data: candlestickData,\n//         options: options,\n//       });\n//     }\n//   }, [selectedCompany, macdData]);\n\n//   if (loading) {\n//     return <p>Loading data...</p>;\n//   }\n//   if (error) {\n//     return <p>Error: {error}</p>;\n//   }\n\n//   if (!Array.isArray(fetchCompanies) || fetchCompanies.length === 0) {\n//     console.error(\"Invalid data format. Expected a non-empty array.\");\n//     return <p>Error: Invalid data format.</p>;\n//   }\n\n//   return (\n//     <div className=\"app-container\">\n//       <div className=\"sidebar\">\n//         <nav className=\"navbar flex-column\">\n//           <Dropdown className=\"dropdown2\">\n//             <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\n//               {selectedDate ? selectedDate.toLocaleDateString() : \"Select Date\"}\n//             </Dropdown.Toggle>\n//             <Dropdown.Menu>\n//               <DatePicker\n//                 selected={selectedDate}\n//                 onChange={handleDateChange}\n//                 inline\n//                 includeDates={fetchDates}\n//               />\n//             </Dropdown.Menu>\n//           </Dropdown>\n//           <div className=\"dropdown1 custom-typeahead\">\n//             <Typeahead\n//               id=\"company-typeahead\"\n//               labelKey=\"SYMBOL\"\n//               options={fetchCompanies}\n//               placeholder=\"Choose a company...\"\n//               onChange={(selected) => {\n//                 if (selected.length > 0) {\n//                   handleCompanySelect(selected[0].SYMBOL);\n//                 }\n//               }}\n//               renderMenuItemChildren={(option) => <div>{option.SYMBOL}</div>}\n//             />\n//           </div>\n//           <button onClick={handleNavigate}>Show Treemap</button>\n//           <button onClick={handleNavigateToTable}>Show</button>\n//         </nav>\n//       </div>\n//       <div className=\"main\">\n//         <div className=\"heading\">\n//           <h1>Data Decode</h1>\n//           <h2>{selectedDate ? `Data for ${selectedDate.toLocaleDateString()}` : \"\"}</h2>\n//         </div>\n//         <div className=\"boxes\">\n//           <div className=\"box\">\n//             {topCompanies.slice(0, 5).map((company) => {\n//               const close = parseFloat(company.CLOSE_DIFF);\n//               const color = close >= 0 ? \"green\" : \"red\";\n//               return (\n//                 <div\n//                   key={company.SYMBOL}\n//                   className=\"company-info\"\n//                   onClick={() => handleCompanySelect(company.SYMBOL)}\n//                 >\n//                   <p className={`company-name ${color}`}>\n//                     {`${company.SYMBOL} - ${\n//                       close >= 0 ? \"+\" : \"\"\n//                     }${close.toFixed(2)}%`}\n//                   </p>\n//                 </div>\n//               );\n//             })}\n//           </div>\n//           <div className=\"box\">\n//             {leastCompanies.slice(0, 5).map((company) => {\n//               const close = parseFloat(company.CLOSE_DIFF);\n//               const color = close >= 0 ? \"green\" : \"red\";\n//               return (\n//                 <div\n//                   key={company.SYMBOL}\n//                   className=\"company-info\"\n//                   onClick={() => handleCompanySelect(company.SYMBOL)}\n//                 >\n//                   <p className={`company-name ${color}`}>\n//                     {`${company.SYMBOL} - ${\n//                       close >= 0 ? \"+\" : \"\"\n//                     }${close.toFixed(2)}%`}\n//                   </p>\n//                 </div>\n//               );\n//             })}\n//           </div>\n//         </div>\n//         <div className=\"chart\">\n//           <canvas id=\"myChart\"></canvas>\n//         </div>\n//         <footer className=\"footer\">\n//           <div className=\"footer-content\">\n//             <p>&copy; 2024 Apex Trading</p>\n//           </div>\n//         </footer>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default MyComponent;\nvar _c;\n$RefreshReg$(_c, \"MyComponent\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","Plot","Dropdown","Typeahead","DatePicker","jsxDEV","_jsxDEV","MyComponent","_s","topCompanies","setTopCompanies","leastCompanies","setLeastCompanies","fetchCompanies","setFetchCompanies","fetchDates","setFetchDates","selectedDate","setSelectedDate","selectedCompany","setSelectedCompany","macdData","setMacdData","error","setError","loading","setLoading","chartTitle","setChartTitle","navigate","fetchInitialData","companyResponse","dateResponse","Promise","all","get","data","dates","map","dateObj","Date","DTE_TME","reversedDates","reverse","topResponse","date","formattedDate","toISOString","split","topRes","leastResponse","length","err","console","log","randomCompany","Math","floor","random","handleCompanySelect","SYMBOL","message","fetchTopCompanies","response","fetchLeastCompanies","symbol","macdResponse","handleDateChange","utcDate","UTC","getFullYear","getMonth","getDate","handleNavigate","handleNavigateToTable","handleBuySell","handleHoldings","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","layout","dragmode","showlegend","width","height","margin","t","l","r","b","xaxis","autorange","title","rangeselector","x","y","xanchor","font","size","buttons","step","stepmode","count","label","yaxis","text","family","color","xref","yanchor","className","Toggle","variant","id","toLocaleDateString","Menu","selected","onChange","inline","includeDates","onClick","slice","company","close","parseFloat","CLOSE_DIFF","toFixed","item","open","OPEN","high","HIGH","low","LOW","CLOSE","type","name","macd","mode","line","signal","histogram","marker","yaxis2","overlaying","side","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/StockMarket/frontend/stock/frontend/src/MyComponent.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Plot from \"react-plotly.js\";\r\nimport \"./App.css\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport { Typeahead } from \"react-bootstrap-typeahead\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\r\n\r\nconst MyComponent = () => {\r\n  const [topCompanies, setTopCompanies] = useState([]);\r\n  const [leastCompanies, setLeastCompanies] = useState([]);\r\n  const [fetchCompanies, setFetchCompanies] = useState([]);\r\n  const [fetchDates, setFetchDates] = useState([]);\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n  const [selectedCompany, setSelectedCompany] = useState(null);\r\n  const [macdData, setMacdData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [chartTitle, setChartTitle] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      try {\r\n        const [companyResponse, dateResponse] = await Promise.all([\r\n          axios.get(\"http://localhost:5000/api/get-symbols\"),\r\n          axios.get(\"http://localhost:5000/api/get-dates\"),\r\n        ]);\r\n\r\n        setFetchCompanies(companyResponse.data);\r\n\r\n        const dates = dateResponse.data.map(\r\n          (dateObj) => new Date(dateObj.DTE_TME)\r\n        );\r\n        setFetchDates(dates);\r\n        const reversedDates = dates.reverse();\r\n        let topResponse = null;\r\n        // Find the latest date with data available\r\n        for (const date of reversedDates) {\r\n          const formattedDate = date.toISOString().split(\"T\")[0];\r\n          try {\r\n            const [topRes, leastResponse] = await Promise.all([\r\n              axios.get(\r\n                `http://localhost:5000/api/top-companies/${formattedDate}`\r\n              ),\r\n              axios.get(\r\n                `http://localhost:5000/api/least-companies/${formattedDate}`\r\n              ),\r\n            ]);\r\n            if (topRes.data.length > 0 && leastResponse.data.length > 0) {\r\n              topResponse = topRes;\r\n              setSelectedDate(date);\r\n              setTopCompanies(topResponse.data);\r\n              setLeastCompanies(leastResponse.data);\r\n              break;\r\n            }\r\n          } catch (err) {\r\n            console.log(`No data for ${formattedDate}, trying next date...`);\r\n          }\r\n        }\r\n        const randomCompany =\r\n          topResponse.data[Math.floor(Math.random() * topResponse.data.length)];\r\n\r\n        if (randomCompany) {\r\n          handleCompanySelect(randomCompany.SYMBOL);\r\n        }\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setError(error.message || \"An error occurred while fetching data.\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInitialData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!selectedDate) return;\r\n\r\n    const fetchTopCompanies = async () => {\r\n      const formattedDate = selectedDate.toISOString().split(\"T\")[0];\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:5000/api/top-companies/${formattedDate}`\r\n        );\r\n        setTopCompanies(response.data);\r\n      } catch (error) {\r\n        setError(\r\n          error.message ||\r\n            `An error occurred while fetching top companies for ${formattedDate}.`\r\n        );\r\n      }\r\n    };\r\n\r\n    const fetchLeastCompanies = async () => {\r\n      const formattedDate = selectedDate.toISOString().split(\"T\")[0];\r\n      try {\r\n        const response = await axios.get(\r\n          `http://localhost:5000/api/least-companies/${formattedDate}`\r\n        );\r\n        setLeastCompanies(response.data);\r\n      } catch (error) {\r\n        setError(\r\n          error.message ||\r\n            `An error occurred while fetching least companies for ${formattedDate}.`\r\n        );\r\n      }\r\n    };\r\n\r\n    fetchTopCompanies();\r\n    fetchLeastCompanies();\r\n  }, [selectedDate]);\r\n\r\n  const handleCompanySelect = async (symbol) => {\r\n    try {\r\n      const [companyResponse, macdResponse] = await Promise.all([\r\n        axios.get(`http://localhost:5000/api/company/${symbol}`),\r\n        axios.get(`http://localhost:5000/api/macd/${symbol}`),\r\n      ]);\r\n      setSelectedCompany(companyResponse.data);\r\n      setMacdData(macdResponse.data);\r\n      setChartTitle(`${companyResponse.data[0].SYMBOL}`);\r\n    } catch (error) {\r\n      setError(\r\n        error.message || `An error occurred while fetching data for ${symbol}.`\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleDateChange = (date) => {\r\n    const utcDate = new Date(\r\n      Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())\r\n    );\r\n    setSelectedDate(utcDate);\r\n  };\r\n\r\n  const handleNavigate = () => {\r\n    navigate(\"/TreeMap\");\r\n  };\r\n\r\n  const handleNavigateToTable = async () => {\r\n    navigate(\"/gainers-losers-table\");\r\n  };\r\n\r\n  const handleBuySell = () => {\r\n    navigate(\"/buy-sell\");\r\n  };\r\n\r\n  const handleHoldings = () => {\r\n    navigate(\"/holdings\");\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>Loading data...</p>;\r\n  }\r\n  if (error) {\r\n    return <p>Error: {error}</p>;\r\n  }\r\n\r\n  if (!Array.isArray(fetchCompanies) || fetchCompanies.length === 0) {\r\n    console.error(\"Invalid data format. Expected a non-empty array.\");\r\n    return <p>Error: Invalid data format.</p>;\r\n  }\r\n\r\n  var layout = {\r\n    dragmode: \"zoom\",\r\n    showlegend: false,\r\n    width: 1180,\r\n    height: 600, // Increased height to accommodate the MACD chart\r\n    margin: {\r\n      t: 30,\r\n      l: 50,\r\n      r: 50,\r\n      b: 30,\r\n    },\r\n    xaxis: {\r\n      autorange: true,\r\n      title: \"Date\",\r\n      rangeselector: {\r\n        x: 0,\r\n        y: 1.2,\r\n        xanchor: \"left\",\r\n        font: { size: 8 },\r\n        buttons: [\r\n          {\r\n            step: \"month\",\r\n            stepmode: \"backward\",\r\n            count: 1,\r\n            label: \"1 month\",\r\n          },\r\n          {\r\n            step: \"month\",\r\n            stepmode: \"backward\",\r\n            count: 6,\r\n            label: \"6 months\",\r\n          },\r\n          {\r\n            step: \"all\",\r\n            label: \"All dates\",\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    yaxis: {\r\n      autorange: true,\r\n    },\r\n    title: {\r\n      text: chartTitle, // Dynamically set the chart title\r\n      font: {\r\n        family: \"Arial, sans-serif\",\r\n        size: 16,\r\n        color: \"#333\",\r\n      },\r\n      xref: \"paper\",\r\n      x: 0.5,\r\n      xanchor: \"center\",\r\n      y: 0.9,\r\n      yanchor: \"top\",\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"sidebar\">\r\n        <nav className=\"navbar flex-column\">\r\n          <Dropdown className=\"dropdown2\">\r\n            <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\r\n              {selectedDate ? selectedDate.toLocaleDateString() : \"Select Date\"}\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <DatePicker\r\n                selected={selectedDate}\r\n                onChange={handleDateChange}\r\n                inline\r\n                includeDates={fetchDates}\r\n              />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n          <div className=\"button-container\">\r\n            <button onClick={handleBuySell}>buy-sell</button>\r\n            <button onClick={handleNavigate}>Show Treemap</button>\r\n            <button onClick={handleNavigateToTable}>gainers-losers</button>\r\n            <button onClick={handleHoldings}>Holdings</button>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n      <div className=\"main\">\r\n        <div className=\"heading\">\r\n          <h1>Data Decode</h1>\r\n          <h2>\r\n            {selectedDate\r\n              ? `Data for ${selectedDate.toLocaleDateString()}`\r\n              : \"\"}\r\n          </h2>\r\n        </div>\r\n        <div className=\"boxes\">\r\n          <div className=\"box\">\r\n            {topCompanies.slice(0, 5).map((company) => {\r\n              const close = parseFloat(company.CLOSE_DIFF);\r\n              const color = close >= 0 ? \"green\" : \"red\";\r\n              return (\r\n                <div\r\n                  key={company.SYMBOL}\r\n                  className=\"company-info\"\r\n                  onClick={() => handleCompanySelect(company.SYMBOL)}\r\n                >\r\n                  <p className={`company-name ${color}`}>\r\n                    {`${company.SYMBOL} - ${\r\n                      close >= 0 ? \"+\" : \"\"\r\n                    }${close.toFixed(2)}%`}\r\n                  </p>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"box\">\r\n            {leastCompanies.slice(0, 5).map((company) => {\r\n              const close = parseFloat(company.CLOSE_DIFF);\r\n              const color = close >= 0 ? \"green\" : \"red\";\r\n              return (\r\n                <div\r\n                  key={company.SYMBOL}\r\n                  className=\"company-info\"\r\n                  onClick={() => handleCompanySelect(company.SYMBOL)}\r\n                >\r\n                  <p className={`company-name ${color}`}>\r\n                    {`${company.SYMBOL} - ${\r\n                      close >= 0 ? \"+\" : \"\"\r\n                    }${close.toFixed(2)}%`}\r\n                  </p>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className=\"chart\">\r\n          {selectedCompany && (\r\n            <Plot\r\n              data={[\r\n                {\r\n                  x: selectedCompany.map((item) => item.DTE_TME),\r\n                  open: selectedCompany.map((item) => parseFloat(item.OPEN)),\r\n                  high: selectedCompany.map((item) => parseFloat(item.HIGH)),\r\n                  low: selectedCompany.map((item) => parseFloat(item.LOW)),\r\n                  close: selectedCompany.map((item) => parseFloat(item.CLOSE)),\r\n                  type: \"candlestick\",\r\n                  name: `${selectedCompany[0].SYMBOL} Candlestick Chart`,\r\n                },\r\n                macdData && {\r\n                  x: macdData.map((item) => item.date),\r\n                  y: macdData.map((item) => item.macd),\r\n                  type: \"scatter\",\r\n                  mode: \"lines\",\r\n                  name: \"MACD\",\r\n                  yaxis: \"y2\",\r\n                  line: { color: \"blue\" },\r\n                },\r\n                macdData && {\r\n                  x: macdData.map((item) => item.date),\r\n                  y: macdData.map((item) => item.signal),\r\n                  type: \"scatter\",\r\n                  mode: \"lines\",\r\n                  name: \"Signal Line\",\r\n                  yaxis: \"y2\",\r\n                  line: { color: \"red\" },\r\n                },\r\n                macdData && {\r\n                  x: macdData.map((item) => item.date),\r\n                  y: macdData.map((item) => item.histogram),\r\n                  type: \"bar\",\r\n                  name: \"Histogram\",\r\n                  yaxis: \"y2\",\r\n                  marker: { color: \"green\" },\r\n                },\r\n              ]}\r\n              layout={{\r\n                ...layout,\r\n                yaxis2: {\r\n                  overlaying: \"y\",\r\n                  side: \"right\",\r\n                  title: \"MACD\",\r\n                },\r\n              }}\r\n            />\r\n          )}\r\n        </div>\r\n        <footer className=\"footer\">\r\n          <div className=\"footer-content\">\r\n            <p>&copy; 2024 Apex Trading</p>\r\n          </div>\r\n        </footer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyComponent;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import axios from \"axios\";\r\n// import \"./App.css\";\r\n// import { Dropdown } from \"react-bootstrap\";\r\n// import { Typeahead } from \"react-bootstrap-typeahead\";\r\n// import DatePicker from \"react-datepicker\";\r\n// import \"react-datepicker/dist/react-datepicker.css\";\r\n// import \"react-bootstrap-typeahead/css/Typeahead.css\";\r\n// import moment from 'moment';\r\n// import Chart from \"chart.js/auto\";\r\n// import 'chartjs-adapter-moment';\r\n\r\n// const MyComponent = () => {\r\n//   const [topCompanies, setTopCompanies] = useState([]);\r\n//   const [leastCompanies, setLeastCompanies] = useState([]);\r\n//   const [fetchCompanies, setFetchCompanies] = useState([]);\r\n//   const [fetchDates, setFetchDates] = useState([]);\r\n//   const [selectedDate, setSelectedDate] = useState(null);\r\n//   const [selectedCompany, setSelectedCompany] = useState(null);\r\n//   const [macdData, setMacdData] = useState(null);\r\n//   const [error, setError] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [chartTitle, setChartTitle] = useState(\"\");\r\n//   const navigate = useNavigate();\r\n\r\n//   useEffect(() => {\r\n//     const fetchInitialData = async () => {\r\n//       try {\r\n//         const [companyResponse, dateResponse] = await Promise.all([\r\n//           axios.get(\"http://localhost:5000/api/get-symbols\"),\r\n//           axios.get(\"http://localhost:5000/api/get-dates\"),\r\n//         ]);\r\n\r\n//         setFetchCompanies(companyResponse.data);\r\n\r\n//         const dates = dateResponse.data.map(\r\n//           (dateObj) => new Date(dateObj.DTE_TME)\r\n//         );\r\n//         setFetchDates(dates);\r\n//         const reversedDates = dates.reverse();\r\n//         // Find the latest date with data available\r\n//         for (const date of reversedDates) {\r\n//           const formattedDate = date.toISOString().split(\"T\")[0];\r\n//           try {\r\n//             const [topResponse, leastResponse] = await Promise.all([\r\n//               axios.get(\r\n//                 `http://localhost:5000/api/top-companies/${formattedDate}`\r\n//               ),\r\n//               axios.get(\r\n//                 `http://localhost:5000/api/least-companies/${formattedDate}`\r\n//               ),\r\n//             ]);\r\n//             if (topResponse.data.length > 0 && leastResponse.data.length > 0) {\r\n//               setSelectedDate(date);\r\n//               setTopCompanies(topResponse.data);\r\n//               setLeastCompanies(leastResponse.data);\r\n//               break;\r\n//             }\r\n//           } catch (err) {\r\n//             console.log(`No data for ${formattedDate}, trying next date...`);\r\n//           }\r\n//         }\r\n//         const randomCompany =\r\n//           companyResponse.data[\r\n//             Math.floor(Math.random() * companyResponse.data.length)\r\n//           ];\r\n//         if (randomCompany) {\r\n//           handleCompanySelect(randomCompany.SYMBOL);\r\n//         }\r\n//         setLoading(false);\r\n//       } catch (error) {\r\n//         setError(error.message || \"An error occurred while fetching data.\");\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n\r\n//     fetchInitialData();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (!selectedDate) return;\r\n\r\n//     const fetchTopCompanies = async () => {\r\n//       const formattedDate = selectedDate.toISOString().split(\"T\")[0];\r\n//       try {\r\n//         const response = await axios.get(\r\n//           `http://localhost:5000/api/top-companies/${formattedDate}`\r\n//         );\r\n//         setTopCompanies(response.data);\r\n//       } catch (error) {\r\n//         setError(\r\n//           error.message ||\r\n//             `An error occurred while fetching top companies for ${formattedDate}.`\r\n//         );\r\n//       }\r\n//     };\r\n\r\n//     const fetchLeastCompanies = async () => {\r\n//       const formattedDate = selectedDate.toISOString().split(\"T\")[0];\r\n//       try {\r\n//         const response = await axios.get(\r\n//           `http://localhost:5000/api/least-companies/${formattedDate}`\r\n//         );\r\n//         setLeastCompanies(response.data);\r\n//       } catch (error) {\r\n//         setError(\r\n//           error.message ||\r\n//             `An error occurred while fetching least companies for ${formattedDate}.`\r\n//         );\r\n//       }\r\n//     };\r\n\r\n//     fetchTopCompanies();\r\n//     fetchLeastCompanies();\r\n//   }, [selectedDate]);\r\n\r\n//   const handleCompanySelect = async (symbol) => {\r\n//     try {\r\n//       const [companyResponse, macdResponse] = await Promise.all([\r\n//         axios.get(`http://localhost:5000/api/company/${symbol}`),\r\n//         axios.get(`http://localhost:5000/api/macd/${symbol}`),\r\n//       ]);\r\n//       setSelectedCompany(companyResponse.data);\r\n//       setMacdData(macdResponse.data);\r\n//       setChartTitle(`${companyResponse.data[0].SYMBOL}`);\r\n//     } catch (error) {\r\n//       setError(\r\n//         error.message || `An error occurred while fetching data for ${symbol}.`\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   const handleDateChange = (date) => {\r\n//     const utcDate = new Date(\r\n//       Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())\r\n//     );\r\n//     setSelectedDate(utcDate);\r\n//   };\r\n\r\n//   const handleNavigate = () => {\r\n//     navigate(\"/TreeMap\"); // Navigate to OtherComponent\r\n//   };\r\n\r\n//   const handleNavigateToTable = async () => {\r\n//     navigate(\"/gainers-losers-table\");\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (!selectedCompany || !macdData) return;\r\n\r\n//     const ctx = document.getElementById(\"myChart\");\r\n//     if (ctx) {\r\n//       const existingChart = Chart.getChart(ctx);\r\n//       if (existingChart) {\r\n//         existingChart.destroy(); // Destroy the existing chart\r\n//       }\r\n//       const candlestickData = {\r\n//         labels: selectedCompany.map((item) => {\r\n//           const date = new Date(item.DTE_TME);\r\n//           return date.toISOString().split(\"T\")[0];\r\n//         }),\r\n//         datasets: [\r\n//           {\r\n//             label: \"Candlestick\",\r\n//             data: selectedCompany\r\n//               .map((item) => ({\r\n//                 t: item.DTE_TME,\r\n//                 o: parseFloat(item.OPEN),\r\n//                 h: parseFloat(item.HIGH),\r\n//                 l: parseFloat(item.LOW),\r\n//                 c: parseFloat(item.CLOSE),\r\n//               }))\r\n//               .sort((a, b) => a.t - b.t),\r\n//             backgroundColor: \"rgba(255, 99, 132, 0.2)\",\r\n//             borderColor: \"rgba(255, 99, 132, 1)\",\r\n//             borderWidth: 1,\r\n//           },\r\n//           {\r\n//             label: \"MACD\",\r\n//             data: macdData.map((item) => ({\r\n//               x: item.date,\r\n//               y: item.macd,\r\n//             })),\r\n//             borderColor: \"rgba(54, 162, 235, 1)\",\r\n//             borderWidth: 1,\r\n//             type: \"line\",\r\n//             yAxisID: \"y-axis-2\",\r\n//           },\r\n//           {\r\n//             label: \"Signal Line\",\r\n//             data: macdData.map((item) => ({\r\n//               x: item.date,\r\n//               y: item.signal,\r\n//             })),\r\n//             borderColor: \"rgba(255, 206, 86, 1)\",\r\n//             borderWidth: 1,\r\n//             type: \"line\",\r\n//             yAxisID: \"y-axis-2\",\r\n//           },\r\n//           {\r\n//             label: \"Histogram\",\r\n//             data: macdData.map((item) => ({\r\n//               x: item.date,\r\n//               y: item.histogram,\r\n//             })),\r\n//             backgroundColor: \"rgba(75, 192, 192, 0.2)\",\r\n//             borderColor: \"rgba(75, 192, 192, 1)\",\r\n//             borderWidth: 1,\r\n//             type: \"bar\",\r\n//             yAxisID: \"y-axis-2\",\r\n//           },\r\n//         ],\r\n//       };\r\n\r\n//       const options = {\r\n//         scales: {\r\n//           x: {\r\n//             type: \"time\",\r\n//             time: {\r\n//               unit: \"\"\r\n//             },\r\n//           },\r\n//           y: {\r\n//             beginAtZero: false,\r\n//           },\r\n//           yAxes: [\r\n//             {\r\n//               type: \"linear\",\r\n//               display: true,\r\n//               position: \"left\",\r\n//               id: \"y-axis-1\",\r\n//             },\r\n//             {\r\n//               type: \"linear\",\r\n//               display: true,\r\n//               position: \"right\",\r\n//               id: \"y-axis-2\",\r\n//               grid: {\r\n//                 drawOnChartArea: false,\r\n//               },\r\n//             },\r\n//           ],\r\n//         },\r\n//       };\r\n\r\n//       new Chart(ctx, {\r\n//         type: \"bar\",\r\n//         data: candlestickData,\r\n//         options: options,\r\n//       });\r\n//     }\r\n//   }, [selectedCompany, macdData]);\r\n\r\n//   if (loading) {\r\n//     return <p>Loading data...</p>;\r\n//   }\r\n//   if (error) {\r\n//     return <p>Error: {error}</p>;\r\n//   }\r\n\r\n//   if (!Array.isArray(fetchCompanies) || fetchCompanies.length === 0) {\r\n//     console.error(\"Invalid data format. Expected a non-empty array.\");\r\n//     return <p>Error: Invalid data format.</p>;\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"app-container\">\r\n//       <div className=\"sidebar\">\r\n//         <nav className=\"navbar flex-column\">\r\n//           <Dropdown className=\"dropdown2\">\r\n//             <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\r\n//               {selectedDate ? selectedDate.toLocaleDateString() : \"Select Date\"}\r\n//             </Dropdown.Toggle>\r\n//             <Dropdown.Menu>\r\n//               <DatePicker\r\n//                 selected={selectedDate}\r\n//                 onChange={handleDateChange}\r\n//                 inline\r\n//                 includeDates={fetchDates}\r\n//               />\r\n//             </Dropdown.Menu>\r\n//           </Dropdown>\r\n//           <div className=\"dropdown1 custom-typeahead\">\r\n//             <Typeahead\r\n//               id=\"company-typeahead\"\r\n//               labelKey=\"SYMBOL\"\r\n//               options={fetchCompanies}\r\n//               placeholder=\"Choose a company...\"\r\n//               onChange={(selected) => {\r\n//                 if (selected.length > 0) {\r\n//                   handleCompanySelect(selected[0].SYMBOL);\r\n//                 }\r\n//               }}\r\n//               renderMenuItemChildren={(option) => <div>{option.SYMBOL}</div>}\r\n//             />\r\n//           </div>\r\n//           <button onClick={handleNavigate}>Show Treemap</button>\r\n//           <button onClick={handleNavigateToTable}>Show</button>\r\n//         </nav>\r\n//       </div>\r\n//       <div className=\"main\">\r\n//         <div className=\"heading\">\r\n//           <h1>Data Decode</h1>\r\n//           <h2>{selectedDate ? `Data for ${selectedDate.toLocaleDateString()}` : \"\"}</h2>\r\n//         </div>\r\n//         <div className=\"boxes\">\r\n//           <div className=\"box\">\r\n//             {topCompanies.slice(0, 5).map((company) => {\r\n//               const close = parseFloat(company.CLOSE_DIFF);\r\n//               const color = close >= 0 ? \"green\" : \"red\";\r\n//               return (\r\n//                 <div\r\n//                   key={company.SYMBOL}\r\n//                   className=\"company-info\"\r\n//                   onClick={() => handleCompanySelect(company.SYMBOL)}\r\n//                 >\r\n//                   <p className={`company-name ${color}`}>\r\n//                     {`${company.SYMBOL} - ${\r\n//                       close >= 0 ? \"+\" : \"\"\r\n//                     }${close.toFixed(2)}%`}\r\n//                   </p>\r\n//                 </div>\r\n//               );\r\n//             })}\r\n//           </div>\r\n//           <div className=\"box\">\r\n//             {leastCompanies.slice(0, 5).map((company) => {\r\n//               const close = parseFloat(company.CLOSE_DIFF);\r\n//               const color = close >= 0 ? \"green\" : \"red\";\r\n//               return (\r\n//                 <div\r\n//                   key={company.SYMBOL}\r\n//                   className=\"company-info\"\r\n//                   onClick={() => handleCompanySelect(company.SYMBOL)}\r\n//                 >\r\n//                   <p className={`company-name ${color}`}>\r\n//                     {`${company.SYMBOL} - ${\r\n//                       close >= 0 ? \"+\" : \"\"\r\n//                     }${close.toFixed(2)}%`}\r\n//                   </p>\r\n//                 </div>\r\n//               );\r\n//             })}\r\n//           </div>\r\n//         </div>\r\n//         <div className=\"chart\">\r\n//           <canvas id=\"myChart\"></canvas>\r\n//         </div>\r\n//         <footer className=\"footer\">\r\n//           <div className=\"footer-content\">\r\n//             <p>&copy; 2024 Apex Trading</p>\r\n//           </div>\r\n//         </footer>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default MyComponent;\r\n"],"mappings":"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A;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA+I,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}